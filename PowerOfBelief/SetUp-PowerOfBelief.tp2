BACKUP ~PowerOfBelief/backup~
AUTHOR ~aquadrizzt@gmail.com~
VERSION ~0.0~ 

/* Language Settings */
AUTO_TRA ~PowerOfBelief/tra/%s~
LANGUAGE ~English~ ~english~ ~PowerOfBelief/tra/english/setup.tra~
LANGUAGE ~Russian (by Salazar [Saigon1983])~ ~russian~ ~PowerOfBelief/tra/russian/setup.tra~
LANGUAGE ~Polish (by Memory [mstar])~ ~polish~ ~PowerOfBelief/tra/polish/setup.tra~

// ========================================================
// MAIN COMPONENT
// -----------------------------
// Contents:
// - Mourns-for-Trees teaching TNO Priest
// - Grace allowing relearning of Priest 
// - Specialization bonuses for level 7 and level 12 
// - Specialization tattoos available from Fell 
// -----------------------------
// Future content:
// - Nature domain after completing "Believe in Trees" quest for Mourns-for-Trees
// - Experience domain from a quest for Fall-from-Grace
// - Oblivion domain from a quest for Hargrimm 
// - More domains to come... 
// - Items for a priestly TNO 
// ========================================================

BEGIN @0

COMPILE ~PowerOfBelief/data/qd_pob_patch.d~

COPY ~PowerOfBelief/data/qd_f2p.cre~ ~override~
	WRITE_EVALUATED_ASCII 0x248 ~qd_f2p~ 
	WRITE_EVALUATED_ASCII 0x2cc ~qd_f2p~
	
COMPILE ~PowerOfBelief/data/qd_f2p.baf~ 

COPY ~PowerOfBelief/data/qd_p2f.cre~ ~override~
	WRITE_EVALUATED_ASCII 0x248 ~qd_p2f~ 
	WRITE_EVALUATED_ASCII 0x2cc ~qd_p2f~
	
COMPILE ~PowerOfBelief/data/qd_p2f.baf~ 

//BUILDING THE FIGHTER TO PRIEST CONVERSION
<<<<<<<< QD/tno_fighter_level.baf
	IF
		Level(Protagonist,%lvl%)
		!Class(Protagonist,CLERIC)
		!XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_fighter_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,-%xp%,ADD)
			Continue() 
	END 
	
	IF
		Level(Protagonist,%lvl%)
		!Class(Protagonist,CLERIC)
		XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_fighter_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_fighter_level_max.baf
	IF
		!Class(Protagonist,CLERIC)
		OR(2)
		Level(Protagonist,%lvl%)
		LevelGT(Protagonist,%lvl%)
		!XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_fighter_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,-%xp%,ADD)
			Continue() 
	END
	
	IF
		!Class(Protagonist,CLERIC)
		OR(2)
		Level(Protagonist,%lvl%)
		LevelGT(Protagonist,%lvl%)
		XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_fighter_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END
>>>>>>>>

<<<<<<<< QD/tno_priest_level_zero.baf
	IF
		Global("qd_tno_priest_lvl","GLOBAL",0)
		!Class(Protagonist,CLERIC)
	THEN	
		RESPONSE #100 
			SetNamelessClass(CLERIC)
			ChangeStat(Protagonist,Level,0,SET)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_priest_level.baf
	IF
		Global("qd_tno_priest_lvl","GLOBAL",%lvl%)
		!Class(Protagonist,CLERIC)
	THEN	
		RESPONSE #100 
			SetNamelessClass(CLERIC)
			ChangeStat(Protagonist,Level,%lvl%,SET)
			ChangeStat(Protagonist,XP,%xp%,ADD)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_priest_level_max.baf
	IF
		!Class(Protagonist,CLERIC)
		OR(2)
		Global("qd_tno_priest_lvl","GLOBAL",%lvl%)
		GlobalGT("qd_tno_priest_lvl","GLOBAL",%lvl%)
	THEN	
		RESPONSE #100 
			SetNamelessClass(CLERIC)
			ChangeStat(Protagonist,Level,%lvl%,SET)
			ChangeStat(Protagonist,XP,%xp%,ADD)
			Continue() 
	END
>>>>>>>>

<<<<<<<< QD/tno_priest_conversion_end.baf
	IF
		True()
	THEN
		RESPONSE #100
			DestroySelf()
	END
>>>>>>>>
		
//Spells known progression reading
COPY_EXISTING ~XPLEVEL.2DA~ ~override~
	COUNT_2DA_COLS num_cols
	COUNT_2DA_ROWS num_cols num_rows
	READ_2DA_ENTRIES_NOW ~r2en_xp_level~ num_cols
	FOR (col = 1; col < num_cols; col += 1) BEGIN
		READ_2DA_ENTRY_FORMER ~r2en_xp_level~ 1 col xp
		INNER_ACTION BEGIN 
			ACTION_IF (col = %num_cols%-1) THEN BEGIN 
				EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_fighter_level_max.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL 
			END 
			ELSE BEGIN 
				EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_fighter_level.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL  
			END 
		END 
	END 
	INNER_ACTION BEGIN 
		EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_priest_level_zero.baf~
	END 
	FOR (col = 1; col < num_cols; col += 1) BEGIN
		READ_2DA_ENTRY_FORMER ~r2en_xp_level~ 4 col xp
		INNER_ACTION BEGIN 
			ACTION_IF (col = %num_cols%-1) THEN BEGIN 
				EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_priest_level_max.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL 
			END 
			ELSE BEGIN 
				EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_priest_level.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL  
			END 
		END 
	END
	
EXTEND_BOTTOM ~qd_f2p.bcs~ ~QD/tno_priest_conversion_end.baf~

//BUILDING THE PRIEST TO FIGHTER CONVERSION
<<<<<<<< QD/tno_priest_level_p2f.baf
	IF
		!Class(Protagonist,FIGHTER)
		Level(Protagonist,%lvl%)
		!XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_priest_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,-%xp%,ADD)
			Continue() 
	END 
	
	IF
		!Class(Protagonist,FIGHTER)
		Level(Protagonist,%lvl%)
		XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_priest_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_priest_level_max_p2f.baf
	IF
		!Class(Protagonist,FIGHTER)
		OR(2)
		Level(Protagonist,%lvl%)
		LevelGT(Protagonist,%lvl%)
		!XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_priest_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,-%xp%,ADD)
			Continue() 
	END
	
	IF
		!Class(Protagonist,FIGHTER)
		OR(2)
		Level(Protagonist,%lvl%)
		LevelGT(Protagonist,%lvl%)
		XPLT(Protagonist,%xp%)
	THEN	
		RESPONSE #100 
			SetGlobal("qd_tno_priest_lvl","GLOBAL",%lvl%)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END
>>>>>>>>

<<<<<<<< QD/tno_fighter_level_zero_p2f.baf
	IF
		Global("qd_tno_fighter_lvl","GLOBAL",0)
		!Class(Protagonist,FIGHTER)
	THEN	
		RESPONSE #100 
			SetNamelessClass(FIGHTER)
			ChangeStat(Protagonist,Level,0,SET)
			ChangeStat(Protagonist,XP,0,SET)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_fighter_level_p2f.baf
	IF
		Global("qd_tno_fighter_lvl","GLOBAL",%lvl%)
		!Class(Protagonist,FIGHTER)
	THEN	
		RESPONSE #100 
			SetNamelessClass(FIGHTER)
			ChangeStat(Protagonist,Level,%lvl%,SET)
			ChangeStat(Protagonist,XP,%xp%,ADD)
			Continue() 
	END 
>>>>>>>>

<<<<<<<< QD/tno_fighter_level_max_p2f.baf
	IF
		!Class(Protagonist,FIGHTER)
		OR(2)
		Global("qd_tno_fighter_lvl","GLOBAL",%lvl%)
		GlobalGT("qd_tno_fighter_lvl","GLOBAL",%lvl%)
	THEN	
		RESPONSE #100 
			SetNamelessClass(FIGHTER)
			ChangeStat(Protagonist,Level,%lvl%,SET)
			ChangeStat(Protagonist,XP,%xp%,ADD)
			Continue() 
	END
>>>>>>>>

<<<<<<<< QD/tno_priest_conversion_end.baf
	IF
		True()
	THEN
		RESPONSE #100
			DestroySelf()
	END
>>>>>>>>
		
//Spells known progression reading
COPY_EXISTING ~XPLEVEL.2DA~ ~override~
	COUNT_2DA_COLS num_cols
	COUNT_2DA_ROWS num_cols num_rows
	READ_2DA_ENTRIES_NOW ~r2en_xp_level~ num_cols
	FOR (col = 1; col < num_cols; col += 1) BEGIN
		READ_2DA_ENTRY_FORMER ~r2en_xp_level~ 1 col xp
		INNER_ACTION BEGIN 
			ACTION_IF (col = %num_cols%-1) THEN BEGIN 
				EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_fighter_level_max_p2f.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL 
			END 
			ELSE BEGIN 
				EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_fighter_level_p2f.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL  
			END 
		END 
	END 
	INNER_ACTION BEGIN 
		EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_fighter_level_zero_p2f.baf~
	END 
	FOR (col = 1; col < num_cols; col += 1) BEGIN
		READ_2DA_ENTRY_FORMER ~r2en_xp_level~ 4 col xp
		INNER_ACTION BEGIN 
			ACTION_IF (col = %num_cols%-1) THEN BEGIN 
				EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_priest_level_max_p2f.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL 
			END 
			ELSE BEGIN 
				EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_priest_level_p2f.baf~ 
					lvl = (%col%)
					xp = (%xp%)
					EVAL  
			END 
		END 
	END
	
EXTEND_BOTTOM ~qd_p2f.bcs~ ~QD/tno_priest_conversion_end.baf~

//Priest specialization tattoos
COPY ~PowerOfBelief/data/QDTTPR1.itm~ ~override~ 
	SAY NAME1 @10 
	SAY IDENTIFIED_DESC @11 

	
COPY ~PowerOfBelief/data/QDTTPR2.itm~ ~override~ 
	SAY NAME1 @12
	SAY IDENTIFIED_DESC @13 

//adding priest tattoos to fell's parlor
COPY_EXISTING ~fell.sto~ ~override~ 
	ADD_STORE_ITEM ~qdttpr1~ #0 #0 #0 ~IDENTIFIED~ #1 
	ADD_STORE_ITEM ~qdttpr2~ AFTER ~qdttpr1~ #0 #0 #0 ~IDENTIFIED~ #1 
	
//specialization bonuses and detection triggers
EXTEND_TOP ~baldur.bcs~ ~PowerOfBelief/data/qd_priest_spec.baf~ 

//Add checks for priest "specializations" for Fell's shop
COPY_EXISTING ~fell.sto~ ~override~
	GET_OFFSET_ARRAY tattoos 0x34 4 0x38 4 0 0 0x58 
	PHP_EACH tattoos AS int => tt_off BEGIN 
		READ_ASCII tt_off itmres
		PATCH_IF (~%itmres%~ STRING_EQUAL_CASE ~qdttpr1~) BEGIN 
			WRITE_LONG (tt_off + 0x1c) RESOLVE_STR_REF(@14) 
		END 
		PATCH_IF (~%itmres%~ STRING_EQUAL_CASE ~qdttpr2~) BEGIN 
			WRITE_LONG (tt_off + 0x1c) RESOLVE_STR_REF(@15)
		END 
	END 
	
ACTION_FOR_EACH itm IN ~AMACE~ ~DDMACE~ ~OLDARM1~ ~SCLUB~ ~REASON~ BEGIN 

	COPY_EXISTING ~%itm%.itm~ ~override~ 
		READ_BYTE 0x1e priest
		WRITE_BYTE 0x1e (priest BAND 01111111)
		READ_STRREF 0x50 unid_desc
		READ_STRREF 0x54 id_desc

	//need to patch descriptions for priests
	//:Usable only by Fighters: reason; amace ddmace, 
	//oldarm1 fighter and thieves to Not usable by mages 
	//sclub needs no desc changes 
END 

//add ClassXLevel Checks for Transcendent One 
EXTEND_BOTTOM ~1204trig.bcs~ ~PowerOfBelief/data/qd_pob_trans.baf~ 
